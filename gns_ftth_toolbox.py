# -*- coding: utf-8 -*-
"""
/***************************************************************************
 GnsFtthToolbox
                                 A QGIS plugin
 FTTH plugin for GNS
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2024-03-24
        git sha              : $Format:%H$
        copyright            : (C) 2024 by GNS
        email                : ftth@gns.eu
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, Qt
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction
from qgis.PyQt.QtSql import QSqlDatabase, QSqlQuery
from qgis.core import QgsProject, QgsDataSourceUri, QgsVectorLayer

# Initialize Qt resources from file resources.py
from .resources import *

# Import the code for the dialog
from .gns_ftth_toolbox_dialog import GnsFtthToolboxDialog
import os.path
import inspect  #!: learn about this usefull module!!
from .my_functions import get_connections, get_schema_list

cmd_folder = os.path.split(inspect.getfile(inspect.currentframe()))[0]


class GnsFtthToolbox:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)

        # my dialog
        self.dlg = GnsFtthToolboxDialog()
        self.dlg.setWindowFlags(Qt.WindowStaysOnTopHint)

        # initialize locale
        locale = QSettings().value("locale/userLocale")[0:2]
        locale_path = os.path.join(
            self.plugin_dir, "i18n", "GnsFtthToolbox_{}.qm".format(locale)
        )

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr("&GNS FTTH Toolbox")

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate("GnsFtthToolbox", message)

    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None,
    ):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(self.menu, action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        # icon_path = ":/plugins/gns_ftth_toolbox/asset/logo.png"
        icon_path = os.path.join(os.path.join(cmd_folder, "./asset/logo.png"))

        self.add_action(
            icon_path,
            text=self.tr("GNS FTTH Toolbox"),
            callback=self.run,
            parent=self.iface.mainWindow(),
        )

        # my signals
        # self.dlg.CreateSchemaBtn.clicked.connect(self.run_sql)
        self.dlg.CreateSchemaBtn.clicked.connect(self.create_schema)
        self.dlg.CreateProjectBtn.clicked.connect(self.create_project)

        # will be set False in run()
        self.first_start = True

    # Create project schema and tables
    def create_schema(self):
        # get schema name from user
        text_input = self.dlg.GnsProjectNameInput.text()

        # get db connection and params
        db = QSqlDatabase().addDatabase("QPSQL")
        db.setHostName("localhost")
        db.setDatabaseName("ftth_db")
        db.setUserName("postgres")
        db.setPassword("0000")
        db.open()

        schema_query = f"""CREATE SCHEMA IF NOT EXISTS {text_input};
                            SET search_path TO {text_input}, public;
                            CREATE TABLE {text_input}.mfg(
                                id SERIAL PRIMARY KEY NOT NULL,
                                name VARCHAR(5),
                                geom geometry(Point, 2532));
                            CREATE TABLE {text_input}.duct(
                                id SERIAL PRIMARY KEY NOT NULL,
                                name VARCHAR(5),
                                geom geometry(Linestring, 2532));
                                """

        query_obj = QSqlQuery()  # create an empty object, DON'T PASS ANY PARAMS !!
        if not query_obj.exec_(schema_query):
            print("Project Schema Error: " + query_obj.lastError().text())
        else:
            print("Project Schema created succefully !")

    def run_sql(self):
        # get input text 'Project Name'
        text_input = self.dlg.GnsProjectNameInput.text()
        print(text_input)

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(self.tr("&GNS FTTH Toolbox"), action)
            self.iface.removeToolBarIcon(action)

    def run(self):
        """Run method that performs all the real work"""
        # get database connections upon plugin activation
        get_connections(self)
        get_schema_list(self)

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            # self.dlg = GnsFtthToolboxDialog()

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass

    def create_project(self):
        # TODO: if database choice have changed, then search for its related schema list !!

        # get schema name from user
        user_schema_name = self.dlg.SchemacomboBox.currentText()
        geom = "geom"

        # get database uri
        db_uri = QgsDataSourceUri()  # create an empty instance
        db_uri.setConnection(
            "localhost", "5432", "ftth_db", "postgres", "0000"
        )  # host_name, port, db_name, owner, password

        # create layer tree groups:
        layer_panel = QgsProject.instance().layerTreeRoot()
        node_group = layer_panel.addGroup("Node")
        arc_group = layer_panel.addGroup("Arc")

        ftth_db_layers = [
            "dp",
            "mfg",
            "duct",
            "drop_cable",
        ]  # loop through layers in db
        layers = []

        db_schema = "too"

        for x in ftth_db_layers:
            db_uri.setDataSource(user_schema_name, x, geom)
            db_layers = QgsVectorLayer(db_uri.uri(False), x, "postgres")

            if db_layers.wkbType() == 1:
                node_group.addLayer(db_layers)
            elif db_layers.wkbType() == 2:
                arc_group.addLayer(db_layers)

        # print("Layers added successfully !")
        print("create_project function !")
